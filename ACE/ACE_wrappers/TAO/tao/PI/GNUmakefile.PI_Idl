# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.PI_Idl
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.PI_Idl
DEPENDENCY_FILE  = .depend.PI_Idl

IDL_DEPENDENCY_FILE1 = .depend.PI_Idl_Idl1
IDL_DEPENDENCY_FILE2 = .depend.PI_Idl_Idl2
IDL_DEPENDENCY_FILE3 = .depend.PI_Idl_Idl3
IDL_DEPENDENCY_FILE4 = .depend.PI_Idl_Idl4
IDL_DEPENDENCY_FILE5 = .depend.PI_Idl_Idl5
IDL_DEPENDENCY_FILE6 = .depend.PI_Idl_Idl6
IDL_DEPENDENCY_FILE7 = .depend.PI_Idl_Idl7
IDL_DEPENDENCY_FILE8 = .depend.PI_Idl_Idl8
IDL_DEPENDENCY_FILE9 = .depend.PI_Idl_Idl9
IDL_DEPENDENCY_FILE10 = .depend.PI_Idl_Idl10
IDL_DEPENDENCY_FILE11 = .depend.PI_Idl_Idl11

IDL_DEPENDENCY_FILES += \
	.depend.PI_Idl_Idl1 \
	.depend.PI_Idl_Idl2 \
	.depend.PI_Idl_Idl3 \
	.depend.PI_Idl_Idl4 \
	.depend.PI_Idl_Idl5 \
	.depend.PI_Idl_Idl6 \
	.depend.PI_Idl_Idl7 \
	.depend.PI_Idl_Idl8 \
	.depend.PI_Idl_Idl9 \
	.depend.PI_Idl_Idl10 \
	.depend.PI_Idl_Idl11

LIB_PREFIX      ?= lib

FILES = \

IDL_DEPS_FLAGS1 = $(TAO_IDLFLAGS) -Sa -St -DGEN_IDL_MAKE_DEPS -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -SS -Sci -Gp -Gd -Wb,export_macro=TAO_PI_Export -Wb,export_include=tao/PI/pi_export.h -iC tao/PI -Sorb -GX -Wb,unique_include=tao/PI/PI.h
IDL_DEPS1 = PI_include.pidl

IDL_DEPS_FLAGS2 = $(TAO_IDLFLAGS) -DGEN_IDL_MAKE_DEPS -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -SS -Sci -Gp -Gd -Wb,export_macro=TAO_PI_Export -Wb,export_include=tao/PI/pi_export.h -iC tao/PI -Sorb -Sal -GX -Wb,include_guard=TAO_PI_SAFE_INCLUDE -Wb,safe_include=tao/PI/PI.h
IDL_DEPS2 = ORBInitInfo.pidl

IDL_DEPS_FLAGS3 = $(TAO_IDLFLAGS) -DGEN_IDL_MAKE_DEPS -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -SS -Sci -Gp -Gd -Wb,export_macro=TAO_PI_Export -Wb,export_include=tao/PI/pi_export.h -iC tao/PI -GA -Sorb -Sal -Wb,include_guard=TAO_PI_SAFE_INCLUDE -Wb,safe_include=tao/PI/PI.h
IDL_DEPS3 = ORBInitializer.pidl

IDL_DEPS_FLAGS4 = $(TAO_IDLFLAGS) -DGEN_IDL_MAKE_DEPS -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -SS -Sci -Gp -Gd -Wb,export_macro=TAO_PI_Export -Wb,export_include=tao/PI/pi_export.h -iC tao/PI -GA -Sorb -Sal -Wb,include_guard=TAO_PI_SAFE_INCLUDE -Wb,safe_include=tao/PI/PI.h
IDL_DEPS4 = ClientRequestInterceptor.pidl

IDL_DEPS_FLAGS5 = $(TAO_IDLFLAGS) -DGEN_IDL_MAKE_DEPS -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -SS -Sci -Gp -Gd -Wb,export_macro=TAO_PI_Export -Wb,export_include=tao/PI/pi_export.h -iC tao/PI -GA -Sorb -Sal -Wb,include_guard=TAO_PI_SAFE_INCLUDE -Wb,safe_include=tao/PI/PI.h
IDL_DEPS5 = ClientRequestInfo.pidl

IDL_DEPS_FLAGS6 = $(TAO_IDLFLAGS) -DGEN_IDL_MAKE_DEPS -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -SS -Sci -Gp -Gd -Wb,export_macro=TAO_PI_Export -Wb,export_include=tao/PI/pi_export.h -iC tao/PI -GA -Sorb -Sal -Wb,include_guard=TAO_PI_SAFE_INCLUDE -Wb,safe_include=tao/PI/PI.h
IDL_DEPS6 = RequestInfo.pidl

IDL_DEPS_FLAGS7 = $(TAO_IDLFLAGS) -DGEN_IDL_MAKE_DEPS -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -SS -Sci -Gp -Gd -Wb,export_macro=TAO_PI_Export -Wb,export_include=tao/PI/pi_export.h -iC tao/PI -GA -Sorb -Sal -Wb,include_guard=TAO_PI_SAFE_INCLUDE -Wb,safe_include=tao/PI/PI.h
IDL_DEPS7 = PIForwardRequest.pidl

IDL_DEPS_FLAGS8 = $(TAO_IDLFLAGS) -DGEN_IDL_MAKE_DEPS -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -SS -Sci -Gp -Gd -Wb,export_macro=TAO_PI_Export -Wb,export_include=tao/PI/pi_export.h -iC tao/PI -GA -Sorb -Sal -Wb,include_guard=TAO_PI_SAFE_INCLUDE -Wb,safe_include=tao/PI/PI.h
IDL_DEPS8 = PICurrent.pidl

IDL_DEPS_FLAGS9 = $(TAO_IDLFLAGS) -DGEN_IDL_MAKE_DEPS -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -SS -Sci -Gp -Gd -Wb,export_macro=TAO_PI_Export -Wb,export_include=tao/PI/pi_export.h -iC tao/PI -GA -Sorb -Sal -Wb,include_guard=TAO_PI_SAFE_INCLUDE -Wb,safe_include=tao/PI/PI.h
IDL_DEPS9 = ProcessingModePolicy.pidl

IDL_DEPS_FLAGS10 = $(TAO_IDLFLAGS) -DGEN_IDL_MAKE_DEPS -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -SS -Sci -Gp -Gd -Wb,export_macro=TAO_PI_Export -Wb,export_include=tao/PI/pi_export.h -iC tao/PI -GA -Sorb -Sal
IDL_DEPS10 = Interceptor.pidl

IDL_DEPS_FLAGS11 = $(TAO_IDLFLAGS) -DGEN_IDL_MAKE_DEPS -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -SS -Sci -Gp -Gd -Wb,export_macro=TAO_PI_Export -Wb,export_include=tao/PI/pi_export.h -iC tao/PI -GA -Sal -Wb,include_guard=TAO_PI_SAFE_INCLUDE -Wb,safe_include=tao/PI/PI.h
IDL_DEPS11 = InvalidSlot.pidl



LIBPATHS := .

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
TAO_IDL = ../../../bin/tao_idl
TAO_IDL_DEP = ../../../bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I../..$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,.)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU


GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/PI_Idl
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

LIBCHECK = 1
ifneq ($(LIBCHECK), 1)
  all: lib_warning
endif


include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L.
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH))
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo PI_Idl will not be built due to the following missing library: $(LIBCHECK) >&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
LIBPATH           := $(LIBPATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
PATH              := $(PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))

GENERATED_DIRTY += PI_includeS.h PI_includeC.h PI_includeA.h PI_includeC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "PI_include.pidl" -nt "PI_includeS.h" 2> /dev/null || $(TEST_EXE) "PI_include.pidl" -nt "PI_includeC.h" 2> /dev/null || $(TEST_EXE) "PI_include.pidl" -nt "PI_includeA.h" 2> /dev/null || $(TEST_EXE) "PI_include.pidl" -nt "PI_includeC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PI_includeS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PI_includeC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PI_includeA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PI_includeC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PI_includeS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PI_includeC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PI_includeA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PI_includeC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PI_includeS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PI_includeC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PI_includeA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PI_includeC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
PI_includeS.h PI_includeC.h PI_includeA.h PI_includeC.cpp: PI_include.pidl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -DGEN_IDL_MAKE_DEPS -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -SS -Sci -Gp -Gd -Wb,export_macro=TAO_PI_Export -Wb,export_include=tao/PI/pi_export.h -iC tao/PI -Sorb -GX -Wb,unique_include=tao/PI/PI.h PI_include.pidl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
PI_includeS.h PI_includeC.h PI_includeA.h PI_includeC.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += ORBInitInfoS.h ORBInitInfoC.h ORBInitInfoA.h ORBInitInfoC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "ORBInitInfo.pidl" -nt "ORBInitInfoS.h" 2> /dev/null || $(TEST_EXE) "ORBInitInfo.pidl" -nt "ORBInitInfoC.h" 2> /dev/null || $(TEST_EXE) "ORBInitInfo.pidl" -nt "ORBInitInfoA.h" 2> /dev/null || $(TEST_EXE) "ORBInitInfo.pidl" -nt "ORBInitInfoC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ORBInitInfoS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ORBInitInfoC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ORBInitInfoA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ORBInitInfoC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ORBInitInfoS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ORBInitInfoC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ORBInitInfoA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ORBInitInfoC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ORBInitInfoS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ORBInitInfoC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ORBInitInfoA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ORBInitInfoC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
ORBInitInfoS.h ORBInitInfoC.h ORBInitInfoA.h ORBInitInfoC.cpp: ORBInitInfo.pidl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DGEN_IDL_MAKE_DEPS -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -SS -Sci -Gp -Gd -Wb,export_macro=TAO_PI_Export -Wb,export_include=tao/PI/pi_export.h -iC tao/PI -Sorb -Sal -GX -Wb,include_guard=TAO_PI_SAFE_INCLUDE -Wb,safe_include=tao/PI/PI.h ORBInitInfo.pidl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
ORBInitInfoS.h ORBInitInfoC.h ORBInitInfoA.h ORBInitInfoC.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += ORBInitializerS.h ORBInitializerC.h ORBInitializerA.h ORBInitializerC.cpp ORBInitializerA.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "ORBInitializer.pidl" -nt "ORBInitializerS.h" 2> /dev/null || $(TEST_EXE) "ORBInitializer.pidl" -nt "ORBInitializerC.h" 2> /dev/null || $(TEST_EXE) "ORBInitializer.pidl" -nt "ORBInitializerA.h" 2> /dev/null || $(TEST_EXE) "ORBInitializer.pidl" -nt "ORBInitializerC.cpp" 2> /dev/null || $(TEST_EXE) "ORBInitializer.pidl" -nt "ORBInitializerA.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ORBInitializerS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ORBInitializerC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ORBInitializerA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ORBInitializerC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ORBInitializerA.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ORBInitializerS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ORBInitializerC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ORBInitializerA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ORBInitializerC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ORBInitializerA.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ORBInitializerS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ORBInitializerC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ORBInitializerA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ORBInitializerC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ORBInitializerA.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
ORBInitializerS.h ORBInitializerC.h ORBInitializerA.h ORBInitializerC.cpp ORBInitializerA.cpp: ORBInitializer.pidl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DGEN_IDL_MAKE_DEPS -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -SS -Sci -Gp -Gd -Wb,export_macro=TAO_PI_Export -Wb,export_include=tao/PI/pi_export.h -iC tao/PI -GA -Sorb -Sal -Wb,include_guard=TAO_PI_SAFE_INCLUDE -Wb,safe_include=tao/PI/PI.h ORBInitializer.pidl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
ORBInitializerS.h ORBInitializerC.h ORBInitializerA.h ORBInitializerC.cpp ORBInitializerA.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += ClientRequestInterceptorS.h ClientRequestInterceptorC.h ClientRequestInterceptorA.h ClientRequestInterceptorC.cpp ClientRequestInterceptorA.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "ClientRequestInterceptor.pidl" -nt "ClientRequestInterceptorS.h" 2> /dev/null || $(TEST_EXE) "ClientRequestInterceptor.pidl" -nt "ClientRequestInterceptorC.h" 2> /dev/null || $(TEST_EXE) "ClientRequestInterceptor.pidl" -nt "ClientRequestInterceptorA.h" 2> /dev/null || $(TEST_EXE) "ClientRequestInterceptor.pidl" -nt "ClientRequestInterceptorC.cpp" 2> /dev/null || $(TEST_EXE) "ClientRequestInterceptor.pidl" -nt "ClientRequestInterceptorA.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ClientRequestInterceptorS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ClientRequestInterceptorC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ClientRequestInterceptorA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ClientRequestInterceptorC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ClientRequestInterceptorA.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ClientRequestInterceptorS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ClientRequestInterceptorC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ClientRequestInterceptorA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ClientRequestInterceptorC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ClientRequestInterceptorA.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ClientRequestInterceptorS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ClientRequestInterceptorC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ClientRequestInterceptorA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ClientRequestInterceptorC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ClientRequestInterceptorA.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
ClientRequestInterceptorS.h ClientRequestInterceptorC.h ClientRequestInterceptorA.h ClientRequestInterceptorC.cpp ClientRequestInterceptorA.cpp: ClientRequestInterceptor.pidl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DGEN_IDL_MAKE_DEPS -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -SS -Sci -Gp -Gd -Wb,export_macro=TAO_PI_Export -Wb,export_include=tao/PI/pi_export.h -iC tao/PI -GA -Sorb -Sal -Wb,include_guard=TAO_PI_SAFE_INCLUDE -Wb,safe_include=tao/PI/PI.h ClientRequestInterceptor.pidl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
ClientRequestInterceptorS.h ClientRequestInterceptorC.h ClientRequestInterceptorA.h ClientRequestInterceptorC.cpp ClientRequestInterceptorA.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += ClientRequestInfoS.h ClientRequestInfoC.h ClientRequestInfoA.h ClientRequestInfoC.cpp ClientRequestInfoA.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "ClientRequestInfo.pidl" -nt "ClientRequestInfoS.h" 2> /dev/null || $(TEST_EXE) "ClientRequestInfo.pidl" -nt "ClientRequestInfoC.h" 2> /dev/null || $(TEST_EXE) "ClientRequestInfo.pidl" -nt "ClientRequestInfoA.h" 2> /dev/null || $(TEST_EXE) "ClientRequestInfo.pidl" -nt "ClientRequestInfoC.cpp" 2> /dev/null || $(TEST_EXE) "ClientRequestInfo.pidl" -nt "ClientRequestInfoA.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ClientRequestInfoS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ClientRequestInfoC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ClientRequestInfoA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ClientRequestInfoC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ClientRequestInfoA.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ClientRequestInfoS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ClientRequestInfoC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ClientRequestInfoA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ClientRequestInfoC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ClientRequestInfoA.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ClientRequestInfoS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ClientRequestInfoC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ClientRequestInfoA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ClientRequestInfoC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ClientRequestInfoA.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
ClientRequestInfoS.h ClientRequestInfoC.h ClientRequestInfoA.h ClientRequestInfoC.cpp ClientRequestInfoA.cpp: ClientRequestInfo.pidl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DGEN_IDL_MAKE_DEPS -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -SS -Sci -Gp -Gd -Wb,export_macro=TAO_PI_Export -Wb,export_include=tao/PI/pi_export.h -iC tao/PI -GA -Sorb -Sal -Wb,include_guard=TAO_PI_SAFE_INCLUDE -Wb,safe_include=tao/PI/PI.h ClientRequestInfo.pidl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
ClientRequestInfoS.h ClientRequestInfoC.h ClientRequestInfoA.h ClientRequestInfoC.cpp ClientRequestInfoA.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += RequestInfoS.h RequestInfoC.h RequestInfoA.h RequestInfoC.cpp RequestInfoA.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "RequestInfo.pidl" -nt "RequestInfoS.h" 2> /dev/null || $(TEST_EXE) "RequestInfo.pidl" -nt "RequestInfoC.h" 2> /dev/null || $(TEST_EXE) "RequestInfo.pidl" -nt "RequestInfoA.h" 2> /dev/null || $(TEST_EXE) "RequestInfo.pidl" -nt "RequestInfoC.cpp" 2> /dev/null || $(TEST_EXE) "RequestInfo.pidl" -nt "RequestInfoA.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RequestInfoS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RequestInfoC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RequestInfoA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RequestInfoC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RequestInfoA.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RequestInfoS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RequestInfoC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RequestInfoA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RequestInfoC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RequestInfoA.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RequestInfoS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RequestInfoC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RequestInfoA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RequestInfoC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RequestInfoA.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
RequestInfoS.h RequestInfoC.h RequestInfoA.h RequestInfoC.cpp RequestInfoA.cpp: RequestInfo.pidl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DGEN_IDL_MAKE_DEPS -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -SS -Sci -Gp -Gd -Wb,export_macro=TAO_PI_Export -Wb,export_include=tao/PI/pi_export.h -iC tao/PI -GA -Sorb -Sal -Wb,include_guard=TAO_PI_SAFE_INCLUDE -Wb,safe_include=tao/PI/PI.h RequestInfo.pidl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
RequestInfoS.h RequestInfoC.h RequestInfoA.h RequestInfoC.cpp RequestInfoA.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += PIForwardRequestS.h PIForwardRequestC.h PIForwardRequestA.h PIForwardRequestC.cpp PIForwardRequestA.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "PIForwardRequest.pidl" -nt "PIForwardRequestS.h" 2> /dev/null || $(TEST_EXE) "PIForwardRequest.pidl" -nt "PIForwardRequestC.h" 2> /dev/null || $(TEST_EXE) "PIForwardRequest.pidl" -nt "PIForwardRequestA.h" 2> /dev/null || $(TEST_EXE) "PIForwardRequest.pidl" -nt "PIForwardRequestC.cpp" 2> /dev/null || $(TEST_EXE) "PIForwardRequest.pidl" -nt "PIForwardRequestA.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PIForwardRequestS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PIForwardRequestC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PIForwardRequestA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PIForwardRequestC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PIForwardRequestA.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PIForwardRequestS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PIForwardRequestC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PIForwardRequestA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PIForwardRequestC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PIForwardRequestA.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PIForwardRequestS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PIForwardRequestC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PIForwardRequestA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PIForwardRequestC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PIForwardRequestA.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
PIForwardRequestS.h PIForwardRequestC.h PIForwardRequestA.h PIForwardRequestC.cpp PIForwardRequestA.cpp: PIForwardRequest.pidl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DGEN_IDL_MAKE_DEPS -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -SS -Sci -Gp -Gd -Wb,export_macro=TAO_PI_Export -Wb,export_include=tao/PI/pi_export.h -iC tao/PI -GA -Sorb -Sal -Wb,include_guard=TAO_PI_SAFE_INCLUDE -Wb,safe_include=tao/PI/PI.h PIForwardRequest.pidl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
PIForwardRequestS.h PIForwardRequestC.h PIForwardRequestA.h PIForwardRequestC.cpp PIForwardRequestA.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += PICurrentS.h PICurrentC.h PICurrentA.h PICurrentC.cpp PICurrentA.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "PICurrent.pidl" -nt "PICurrentS.h" 2> /dev/null || $(TEST_EXE) "PICurrent.pidl" -nt "PICurrentC.h" 2> /dev/null || $(TEST_EXE) "PICurrent.pidl" -nt "PICurrentA.h" 2> /dev/null || $(TEST_EXE) "PICurrent.pidl" -nt "PICurrentC.cpp" 2> /dev/null || $(TEST_EXE) "PICurrent.pidl" -nt "PICurrentA.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PICurrentS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PICurrentC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PICurrentA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PICurrentC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PICurrentA.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PICurrentS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PICurrentC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PICurrentA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PICurrentC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PICurrentA.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PICurrentS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PICurrentC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PICurrentA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PICurrentC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PICurrentA.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
PICurrentS.h PICurrentC.h PICurrentA.h PICurrentC.cpp PICurrentA.cpp: PICurrent.pidl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DGEN_IDL_MAKE_DEPS -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -SS -Sci -Gp -Gd -Wb,export_macro=TAO_PI_Export -Wb,export_include=tao/PI/pi_export.h -iC tao/PI -GA -Sorb -Sal -Wb,include_guard=TAO_PI_SAFE_INCLUDE -Wb,safe_include=tao/PI/PI.h PICurrent.pidl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
PICurrentS.h PICurrentC.h PICurrentA.h PICurrentC.cpp PICurrentA.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += ProcessingModePolicyS.h ProcessingModePolicyC.h ProcessingModePolicyA.h ProcessingModePolicyC.cpp ProcessingModePolicyA.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "ProcessingModePolicy.pidl" -nt "ProcessingModePolicyS.h" 2> /dev/null || $(TEST_EXE) "ProcessingModePolicy.pidl" -nt "ProcessingModePolicyC.h" 2> /dev/null || $(TEST_EXE) "ProcessingModePolicy.pidl" -nt "ProcessingModePolicyA.h" 2> /dev/null || $(TEST_EXE) "ProcessingModePolicy.pidl" -nt "ProcessingModePolicyC.cpp" 2> /dev/null || $(TEST_EXE) "ProcessingModePolicy.pidl" -nt "ProcessingModePolicyA.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ProcessingModePolicyS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ProcessingModePolicyC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ProcessingModePolicyA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ProcessingModePolicyC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ProcessingModePolicyA.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ProcessingModePolicyS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ProcessingModePolicyC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ProcessingModePolicyA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ProcessingModePolicyC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ProcessingModePolicyA.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ProcessingModePolicyS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ProcessingModePolicyC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ProcessingModePolicyA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ProcessingModePolicyC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ProcessingModePolicyA.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
ProcessingModePolicyS.h ProcessingModePolicyC.h ProcessingModePolicyA.h ProcessingModePolicyC.cpp ProcessingModePolicyA.cpp: ProcessingModePolicy.pidl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DGEN_IDL_MAKE_DEPS -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -SS -Sci -Gp -Gd -Wb,export_macro=TAO_PI_Export -Wb,export_include=tao/PI/pi_export.h -iC tao/PI -GA -Sorb -Sal -Wb,include_guard=TAO_PI_SAFE_INCLUDE -Wb,safe_include=tao/PI/PI.h ProcessingModePolicy.pidl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
ProcessingModePolicyS.h ProcessingModePolicyC.h ProcessingModePolicyA.h ProcessingModePolicyC.cpp ProcessingModePolicyA.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += InterceptorS.h InterceptorC.h InterceptorA.h InterceptorC.cpp InterceptorA.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Interceptor.pidl" -nt "InterceptorS.h" 2> /dev/null || $(TEST_EXE) "Interceptor.pidl" -nt "InterceptorC.h" 2> /dev/null || $(TEST_EXE) "Interceptor.pidl" -nt "InterceptorA.h" 2> /dev/null || $(TEST_EXE) "Interceptor.pidl" -nt "InterceptorC.cpp" 2> /dev/null || $(TEST_EXE) "Interceptor.pidl" -nt "InterceptorA.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InterceptorS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InterceptorC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InterceptorA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InterceptorC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InterceptorA.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InterceptorS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InterceptorC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InterceptorA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InterceptorC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InterceptorA.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InterceptorS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InterceptorC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InterceptorA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InterceptorC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InterceptorA.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
InterceptorS.h InterceptorC.h InterceptorA.h InterceptorC.cpp InterceptorA.cpp: Interceptor.pidl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DGEN_IDL_MAKE_DEPS -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -SS -Sci -Gp -Gd -Wb,export_macro=TAO_PI_Export -Wb,export_include=tao/PI/pi_export.h -iC tao/PI -GA -Sorb -Sal Interceptor.pidl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
InterceptorS.h InterceptorC.h InterceptorA.h InterceptorC.cpp InterceptorA.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += InvalidSlotS.h InvalidSlotC.h InvalidSlotA.h InvalidSlotC.cpp InvalidSlotA.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "InvalidSlot.pidl" -nt "InvalidSlotS.h" 2> /dev/null || $(TEST_EXE) "InvalidSlot.pidl" -nt "InvalidSlotC.h" 2> /dev/null || $(TEST_EXE) "InvalidSlot.pidl" -nt "InvalidSlotA.h" 2> /dev/null || $(TEST_EXE) "InvalidSlot.pidl" -nt "InvalidSlotC.cpp" 2> /dev/null || $(TEST_EXE) "InvalidSlot.pidl" -nt "InvalidSlotA.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InvalidSlotS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InvalidSlotC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InvalidSlotA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InvalidSlotC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InvalidSlotA.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InvalidSlotS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InvalidSlotC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InvalidSlotA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InvalidSlotC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InvalidSlotA.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InvalidSlotS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InvalidSlotC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InvalidSlotA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InvalidSlotC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InvalidSlotA.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
InvalidSlotS.h InvalidSlotC.h InvalidSlotA.h InvalidSlotC.cpp InvalidSlotA.cpp: InvalidSlot.pidl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DGEN_IDL_MAKE_DEPS -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -SS -Sci -Gp -Gd -Wb,export_macro=TAO_PI_Export -Wb,export_include=tao/PI/pi_export.h -iC tao/PI -GA -Sal -Wb,include_guard=TAO_PI_SAFE_INCLUDE -Wb,safe_include=tao/PI/PI.h InvalidSlot.pidl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
InvalidSlotS.h InvalidSlotC.h InvalidSlotA.h InvalidSlotC.cpp InvalidSlotA.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
all: $(GENERATED_DIRTY)
endif

ADDITIONAL_IDL_TARGETS += PI_include$(IDL_CLIENT_HDR_EXT) ORBInitInfo$(IDL_CLIENT_HDR_EXT) ORBInitializer$(IDL_CLIENT_HDR_EXT) ClientRequestInterceptor$(IDL_CLIENT_HDR_EXT) ClientRequestInfo$(IDL_CLIENT_HDR_EXT) RequestInfo$(IDL_CLIENT_HDR_EXT) PIForwardRequest$(IDL_CLIENT_HDR_EXT) PICurrent$(IDL_CLIENT_HDR_EXT) ProcessingModePolicy$(IDL_CLIENT_HDR_EXT) Interceptor$(IDL_CLIENT_HDR_EXT) InvalidSlot$(IDL_CLIENT_HDR_EXT)
idl_stubs: $(ADDITIONAL_IDL_TARGETS)

incremental_depend_idl::
	@$(RM) $(IDL_DEPENDENCY_FILE1)_idl.old
	@cp $(IDL_DEPENDENCY_FILE1) $(IDL_DEPENDENCY_FILE1)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE1) \
	$(IDL_DEPS_FLAGS1) -t gnuidl -DMAKEDEPEND $(IDL_DEPS1)
	@if cmp -s $(IDL_DEPENDENCY_FILE1) $(IDL_DEPENDENCY_FILE1)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS1)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS1)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE1)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE2)_idl.old
	@cp $(IDL_DEPENDENCY_FILE2) $(IDL_DEPENDENCY_FILE2)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE2) \
	$(IDL_DEPS_FLAGS2) -t gnuidl -DMAKEDEPEND $(IDL_DEPS2)
	@if cmp -s $(IDL_DEPENDENCY_FILE2) $(IDL_DEPENDENCY_FILE2)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS2)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS2)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE2)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE3)_idl.old
	@cp $(IDL_DEPENDENCY_FILE3) $(IDL_DEPENDENCY_FILE3)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE3) \
	$(IDL_DEPS_FLAGS3) -t gnuidl -DMAKEDEPEND $(IDL_DEPS3)
	@if cmp -s $(IDL_DEPENDENCY_FILE3) $(IDL_DEPENDENCY_FILE3)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS3)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS3)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE3)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE4)_idl.old
	@cp $(IDL_DEPENDENCY_FILE4) $(IDL_DEPENDENCY_FILE4)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE4) \
	$(IDL_DEPS_FLAGS4) -t gnuidl -DMAKEDEPEND $(IDL_DEPS4)
	@if cmp -s $(IDL_DEPENDENCY_FILE4) $(IDL_DEPENDENCY_FILE4)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS4)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS4)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE4)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE5)_idl.old
	@cp $(IDL_DEPENDENCY_FILE5) $(IDL_DEPENDENCY_FILE5)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE5) \
	$(IDL_DEPS_FLAGS5) -t gnuidl -DMAKEDEPEND $(IDL_DEPS5)
	@if cmp -s $(IDL_DEPENDENCY_FILE5) $(IDL_DEPENDENCY_FILE5)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS5)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS5)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE5)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE6)_idl.old
	@cp $(IDL_DEPENDENCY_FILE6) $(IDL_DEPENDENCY_FILE6)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE6) \
	$(IDL_DEPS_FLAGS6) -t gnuidl -DMAKEDEPEND $(IDL_DEPS6)
	@if cmp -s $(IDL_DEPENDENCY_FILE6) $(IDL_DEPENDENCY_FILE6)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS6)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS6)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE6)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE7)_idl.old
	@cp $(IDL_DEPENDENCY_FILE7) $(IDL_DEPENDENCY_FILE7)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE7) \
	$(IDL_DEPS_FLAGS7) -t gnuidl -DMAKEDEPEND $(IDL_DEPS7)
	@if cmp -s $(IDL_DEPENDENCY_FILE7) $(IDL_DEPENDENCY_FILE7)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS7)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS7)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE7)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE8)_idl.old
	@cp $(IDL_DEPENDENCY_FILE8) $(IDL_DEPENDENCY_FILE8)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE8) \
	$(IDL_DEPS_FLAGS8) -t gnuidl -DMAKEDEPEND $(IDL_DEPS8)
	@if cmp -s $(IDL_DEPENDENCY_FILE8) $(IDL_DEPENDENCY_FILE8)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS8)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS8)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE8)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE9)_idl.old
	@cp $(IDL_DEPENDENCY_FILE9) $(IDL_DEPENDENCY_FILE9)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE9) \
	$(IDL_DEPS_FLAGS9) -t gnuidl -DMAKEDEPEND $(IDL_DEPS9)
	@if cmp -s $(IDL_DEPENDENCY_FILE9) $(IDL_DEPENDENCY_FILE9)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS9)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS9)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE9)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE10)_idl.old
	@cp $(IDL_DEPENDENCY_FILE10) $(IDL_DEPENDENCY_FILE10)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE10) \
	$(IDL_DEPS_FLAGS10) -t gnuidl -DMAKEDEPEND $(IDL_DEPS10)
	@if cmp -s $(IDL_DEPENDENCY_FILE10) $(IDL_DEPENDENCY_FILE10)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS10)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS10)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE10)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE11)_idl.old
	@cp $(IDL_DEPENDENCY_FILE11) $(IDL_DEPENDENCY_FILE11)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE11) \
	$(IDL_DEPS_FLAGS11) -t gnuidl -DMAKEDEPEND $(IDL_DEPS11)
	@if cmp -s $(IDL_DEPENDENCY_FILE11) $(IDL_DEPENDENCY_FILE11)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS11)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS11)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE11)_idl.old ;

realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
	@-:


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
UNAME := $(shell uname)
ifeq ($(UNAME), HP-UX)
LDFLAGS += -Wl,+s,+b,$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
else
ifeq ($(UNAME), Darwin)
LDFLAGS += -Wl,-rpath $(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
else
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif
endif
endif

PRJINST_OPTIONS ?=
INST_DIR ?= /tao/PI
COMMA = ,
SPACE = $(should_be_unset) $(should_be_unset)
INSTALLER ?= $(MPC_ROOT)/prj_install.pl
CUSTOM_INST_TAGS = $(sort pidlinstallwithoutbuilding_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files )

INST_TAGS = $(CUSTOM_INST_TAGS)
INST_LOCATIONS = $(foreach tag,$(INST_TAGS),-b $(tag)=include$(INST_DIR))

DATA_INST_TAGS = 
INST_LOCATIONS += $(if $(DATA_INST_TAGS),-x installdata_files -b installdata_files=share$(INST_DIR))
INST_TAGS := $(INST_TAGS)$(if $(DATA_INST_TAGS), $(DATA_INST_TAGS))

ifeq ($(INSTALLER),/prj_install.pl)
INSTALLER = $(ACE_ROOT)/MPC/prj_install.pl
endif

ifeq ($(LIBCHECK),1)
install:
ifeq ($(INST_TAGS),)
	@echo Nothing to install.
else
ifeq ($(INSTALL_PREFIX),)
	@echo The variable INSTALL_PREFIX must be set to install.
	@echo If binaries are already built and you want to use RPATH,
	@echo they must be rebuilt after changing INSTALL_PREFIX.
	@false
else
	perl -ne'if (/^#END MPC-Generated Install Info/) {exit 0}' \
	  -e'elsif (/^#BEGIN MPC-Generated Install Info/) {$$ok=1}' \
	  -e'elsif ($$ok && s/^#//) {print}' $(MAKEFILE) | \
	$(INSTALLER) -i -s $(subst $(SPACE),$(COMMA),$(INST_TAGS)) \
	  $(INST_LOCATIONS) $(if $(ARCH),-d $(ARCH)) $(PRJINST_OPTIONS) \
	  $(DESTDIR)$(INSTALL_PREFIX)
endif
endif
endif

#BEGIN MPC-Generated Install Info
#pidlinstallwithoutbuilding_files:
#PolicyFactory.pidl
#
#build_files:
#PI.mpc
#
#idl_files:
#PI_include.pidl
#ORBInitInfo.pidl
#ORBInitializer.pidl
#ClientRequestInterceptor.pidl
#ClientRequestInfo.pidl
#RequestInfo.pidl
#PIForwardRequest.pidl
#PICurrent.pidl
#ProcessingModePolicy.pidl
#Interceptor.pidl
#InvalidSlot.pidl
#

#END MPC-Generated Install Info

